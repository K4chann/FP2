"""Module which contains a class that inherit from SortedLinkedList."""
from sortedlinkedlist import SortedLinkedList


class DeletableSLL(SortedLinkedList):
    """Class used to delete an element from SortedLinkedList."""

    def __init__(self):
        """Inicializador de la clase."""
        super().__init__()

    def delete(self, value):
        """Método de instancia que elimina el nodo con el valor pasado."""
        # Si la lista tiene sólo un elemento.
        if self._SortedLinkedList__len == 1:
            if self._SortedLinkedList__first.value == value:
                self._SortedLinkedList__first = None
                self._SortedLinkedList__len -= 1

        if self._SortedLinkedList__len > 1:
            prev = self._SortedLinkedList__first
            curr = self._SortedLinkedList__first.next_node

            # Si es el primer elemento.
            while prev is not None and prev.value == value:
                self._SortedLinkedList__first = curr
                prev = curr
                curr = curr.next_node if curr is not None else None
                self._SortedLinkedList__len -= 1

            # Si no es el primer elemento se ordena y se busca el valor.
            while curr is not None and curr.value <= value:
                if curr.value == value:
                    prev.next_node = curr.next_node
                    curr = curr.next_node if curr is not None else None
                    self._SortedLinkedList__len -= 1
                else:
                    prev = curr
                    curr = curr.next_node
